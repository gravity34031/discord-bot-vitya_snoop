import datetime
import discord
import asyncio

from discord import app_commands
from discord.ext import commands

from models.models import Session, VoiceTime
from utils.nick import change_nickname, get_base_mult
from utils.decorators import in_allowed_channels
from utils.constants import RARITY_STYLES


class CommandCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot


    # randomly change nickname
    @app_commands.command(name="snoop", description="–°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –º–µ–Ω—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º")
    @app_commands.describe(target="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(—á–µ—Ä–µ–∑ @ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º)")
    @app_commands.checks.cooldown(rate=1, per=5, key=lambda i: (i.user.id))
    # @in_allowed_channels(1354784115613761606)
    async def snoop(self, interaction: discord.Interaction, target: str|None=None) -> None:
        await interaction.response.defer(ephemeral=True)
        
        member = await self._get_user_from_mention(interaction, target)
        if member is None:
            await interaction.followup.send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.", ephemeral=True)
            return
        
        asyncio.create_task(self._run_snoop_logic(interaction, member))
        

    @app_commands.command(name="stats", description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    @app_commands.describe(target="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(—á–µ—Ä–µ–∑ @ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º)")
    async def stats(self, interaction: discord.Interaction, target: str|None=None) -> None:
        member = await self._get_user_from_mention(interaction, target)
        if member is None: return
        
        try:
            session = Session()
            user_id, guild_id = member.id, member.guild.id
            voice_entry = session.query(VoiceTime).filter_by(user_id=user_id, guild_id=guild_id).first()
            if voice_entry is None:
                voice_entry = VoiceTime(user_id=user_id, guild_id=guild_id, total_time=0)
                session.add(voice_entry)
                session.commit()
                
            hours_spent = round(voice_entry.total_time / 60, 2) if voice_entry.total_time else voice_entry.total_time
            base_mult = get_base_mult(hours_spent)
            
            await interaction.response.send_message(
                f'–í—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name} ({member}) –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö: {hours_spent} —á.\n'
                f'–ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {base_mult} (0.0001 –∑–∞ 1 —á–∞—Å)'
                , ephemeral=True)
        except:
            print('error while checking database.')
        finally:
            session.close()
            


    @app_commands.command(name="top", description="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")
    async def top(self, interaction: discord.Interaction) -> None:
        try:
            guild_id = interaction.guild.id
            session = Session()
            voice_entry = session.query(VoiceTime).filter_by(guild_id=guild_id).order_by(VoiceTime.total_time.desc()).limit(10).all()
            if voice_entry is not None:
                guild = interaction.guild  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
                members = {member.id: (member.display_name, member) for member in guild.members}  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {id: –Ω–∏–∫}
                
                message = "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö:\n"
                for entry in voice_entry:
                    time_hours = round(entry.total_time / 60, 2) if entry.total_time else entry.total_time
                    display_name = members.get(entry.user_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({entry.user_id})")[0]
                    username = members.get(entry.user_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({entry.user_id})")[1]
                    message += f'{display_name} {f"({username})" if username else ""}: {time_hours} —á.\n'
                await interaction.response.send_message(message, ephemeral=True)
        except:
            print('error while checking database.')
        finally:
            session.close()


    # send a message
    @app_commands.command(name="say", description="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    @app_commands.describe(message="–°–æ–æ–±—â–µ–Ω–∏–µ")
    async def say(self, interaction: discord.Interaction, message: str) -> None:
        await interaction.response.send_message(message)


    # get channel id
    @app_commands.command(name="get_channel_id", description="Get channel id")
    @app_commands.describe(name="Channel name")
    async def get_channel_id(self, interaction: discord.Interaction, name: str) -> None:
        for channel in interaction.guild.channels:
            if channel.name == name:
                wanted_channel_id = channel.id
        await interaction.response.send_message(f'ID –∫–∞–Ω–∞–ª–∞ {name}: {wanted_channel_id}', ephemeral=True) # this is just to check 


    # clear commands cache and sync
    @commands.command()
    async def clear_commands(self, ctx):
        if ctx.guild is None:
            await ctx.send("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        guild = discord.Object(id=ctx.guild.id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä
        
        try:
            self.bot.tree.clear_commands(guild=guild)
            await self.bot.tree.sync(guild=guild)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
            await ctx.send("–í—Å–µ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –æ—á–∏—â–µ–Ω—ã!")
        except Exception as e:
            await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–∞–Ω–¥: {e}")


    async def _run_snoop_logic(self, interaction, member):
        try:
            nickname, rarity, base_mult = await change_nickname(member)

            await interaction.followup.send(
                f"üïµÔ∏è –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member} ({member.mention}) –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ **{nickname}**\n"
                f"üéñÔ∏è –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {RARITY_STYLES.get(rarity, f'**{rarity}**')}\n"
                f"üåü –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: **{base_mult}** (0.0001 –∑–∞ 1 —á–∞—Å)",
                ephemeral=True
            )
        except Exception as e:
            print(f"[SNOOP ERROR] {e}")
            await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–∞ –∏–ª–∏ —Ä–æ–ª–∏.", ephemeral=True)


    async def _get_user_from_mention(self, interaction: discord.Interaction, mention: str) -> discord.User:
        member = interaction.user
        if mention:
            try:
                if mention=='@everyone' or mention=='@here':
                    return None
                elif mention.startswith('<') and mention.endswith('>'):
                    target_id = int(mention[2:-1])
                    member = discord.utils.get(interaction.guild.members, id=target_id)
                else:
                    member = discord.utils.get(interaction.guild.members, name=mention)
            except:
                return None
        return member


async def setup(bot):
    await bot.add_cog(CommandCog(bot))
    
    

def update_voice_stats(bot):
    session = Session()
    try:
        now = datetime.datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
        all_entries = session.query(VoiceTime).all()
        active_users = set()  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –°–ï–ô–ß–ê–° –≤ –≥–æ–ª–æ—Å–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Ç—ã
        for guild in bot.guilds:
            for vc in guild.voice_channels:
                for member in vc.members:
                    user_id = member.id
                    guild_id = guild.id
                    active_users.add((user_id, guild_id))  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç —é–∑–µ—Ä —Å–µ–π—á–∞—Å –≤ –≥–æ–ª–æ—Å–µ

                    voice_entry = session.query(VoiceTime).filter_by(user_id=user_id, guild_id=guild_id).first()
                    if voice_entry:
                        print(f"{member.display_name} —É–∂–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ ({vc.name}).")
                    else:
                        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                        voice_entry = VoiceTime(user_id=user_id, guild_id=guild_id, last_join=now, total_time=0)
                        session.add(voice_entry)

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –ë–´–õ –≤ –≥–æ–ª–æ—Å–µ, –Ω–æ —Å–µ–π—á–∞—Å –ù–ï –≤ –≥–æ–ª–æ—Å–µ (–∑–Ω–∞—á–∏—Ç, –æ–Ω –≤—ã—à–µ–ª –≤–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞)
        for entry in all_entries:
            user_id, guild_id = entry.user_id, entry.guild_id
            if (user_id, guild_id) not in active_users and entry.last_join:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤–æ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ -> —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ–≥–æ –≤—Ä–µ–º—è
                time_spent = now - entry.last_join
                minutes = round(time_spent.total_seconds() / 60, 2)
                entry.total_time += minutes
                entry.total_time = round(entry.total_time, 2)
                entry.last_join = None  # –û–±–Ω—É–ª—è–µ–º last_join, —á—Ç–æ–±—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            elif (user_id, guild_id) in active_users and not entry.last_join:
                entry.last_join = now

        print("–ì–æ–ª–æ—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        session.commit()
        session.close()